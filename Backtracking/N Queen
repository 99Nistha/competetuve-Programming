 bool isSafe(vector<vector<int>> pos,int row,int col,int A){
    if(row>=A){
        return false;
    }
    if(col>=A){
        return false;
    }
    for(int i=0;i<A;i++){
        if(pos[i][col]==1){
            return false;
        }
    }
    for(int i=0;i<row;i++){
        for(int j=0;j<A;j++){
            if(pos[i][j]==1){
                if(abs(row-i) == abs(col-j)){
                    return false;
                }
            }
        }
    }
    return true;
}

vector<string> corr(vector<string> temp,int A){
    for(int i=0;i<temp.size();i++){
        while(temp[i].length()<A){
            temp[i]+=".";
        }
    }
    return temp;
}


void helper(int q,int A,vector<vector<int>> &pos,vector<vector<string>> &sol,vector<string> &temp){
    if(q==A){
        temp = corr(temp,A);
        sol.push_back(temp);
        return;
    }
    string s = "";
    for(int i=0;i<A;i++){
        if(isSafe(pos,q,i,A)){
            s+="Q";
            pos[q][i] = 1;
            temp.push_back(s);
            helper(q+1,A,pos,sol,temp);
            pos[q][i] = 0;
            temp.pop_back();
            s = s.substr(0,s.length()-1);
        }
        s+=".";
    }
}


vector<vector<string> > Solution::solveNQueens(int A) {
    vector<vector<int>> pos( A , vector<int> (A, 0));
    vector<vector<string>> sol;
    vector<string> temp;
    helper(0,A,pos,sol,temp);
    return sol;
    
}

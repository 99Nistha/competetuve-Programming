/*        0
       /  |  \
      1   2   3
               \
                4
*/
int dfs(vector<int>adj[], int root, int &ans){
    if(adj[root].size()==0) return 1;
    int max1=0,max2=0;
    for(int i=0;i<adj[root].size();i++){
        int h=dfs(adj,adj[root][i],ans);
        if(h>max1){
            max2=max1;
            max1=h;
        }else if(h>max2){
            max2=h;
        }
    }
    ans=max(ans,max1+max2+1);
    
    return max(max1,max2)+1;
}

int Solution::solve(vector<int> &A) {
    int n=A.size();
    vector<int>adj[n+1];
    int root;
    for(int i=0;i<A.size();i++){
        if(A[i]==-1){
            root=i;
            continue;
        }else{
         adj[A[i]].push_back(i);   
        }
    }
    int ans=0;
    if(adj[root].size()==0) return 0;
    dfs(adj,root,ans);
    return ans-1;
}

/*
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 *
class Solution {
    pair<int,int> diameterOfBinaryTree_util(TreeNode* root)
    {
        if(!root)
            return make_pair(0,0);
        
        pair<int,int> left = diameterOfBinaryTree_util(root->left);
        pair<int,int> right = diameterOfBinaryTree_util(root->right);
        
        int internal_path = max(left.second,right.second);
        if(left.first+right.first+1 > internal_path)
            internal_path = left.first+right.first+1;
        
        return make_pair(max(left.first,right.first)+1, internal_path);
    }
    
public:
    int diameterOfBinaryTree(TreeNode* root) {
        
        if(!root)
            return 0;
        pair<int,int> result = diameterOfBinaryTree_util(root);
        return max(result.first, result.second)-1;
    }
};*/

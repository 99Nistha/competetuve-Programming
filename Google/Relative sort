bool isIncreasing(vector<int>& v){
  for (int i = 1; i < v.size(); i++) {
    if (v[i] <= v[i - 1]) return false;
  }
  return true;
}

int relativeSortHelper(vector<int>& a, vector<int>& b, int pos) {
  if (pos == a.size()) return isIncreasing(a) && isIncreasing(b) ? 0 : -1;
  int notSwapped = relativeSortHelper(a, b, pos + 1);
  swap(a[pos], b[pos]);
  int swapped = relativeSortHelper(a, b, pos + 1);
  if (swapped == -1 && notSwapped == -1) return -1;
  else if (swapped == -1) return notSwapped;
  else if (notSwapped == -1) return swapped + 1;
  else return min(swapped + 1, notSwapped);
}

int relativeArraySort(int len, vector<int>& a, vector<int>& b) {
  return relativeSortHelper(a, b, 0);
}

int main() {
  vector<int> a = {2,2,5,11};
  vector<int> b = {1,3,3,10};
  cout << relativeArraySort(4, a, b) << endl; // 2
  vector<int> c = {1,4,4,9};
  vector<int> d = {2,3,5,10};
  cout << relativeArraySort(4, c, d) << endl; // 1
	return 0;
}

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if( root == p || root == q || root == NULL)
            return root;
        TreeNode* left = lowestCommonAncestor( root->left,  p,  q);
        TreeNode* right = lowestCommonAncestor( root->right,  p,  q);
        if(left == NULL)
            return right;
        else if (right == NULL)
            return left;
        else
            return root;
    }
};

/* bool find(TreeNode *a,int b)
 {
    if(!a) return false;
    if(a->val == b) return true;
    return find(a->left,b) || find(a->right,b);
 }
 TreeNode *findlca(TreeNode* a, int b, int c)
 {
    if(!a) return 0;
    if(a->val == b || a->val == c)
    {
        return a;
    }
    TreeNode *temp1 = findlca(a->left,b,c);
    TreeNode *temp2 = findlca(a->right,b,c);
    if(temp1 && temp2) return a;
    return temp1 ? temp1 : temp2;
 }
int Solution::lca(TreeNode* a, int b, int c) {
    if(!find(a,b) || !find(a,c)) return -1;
    TreeNode *temp = findlca(a,b,c);
    return temp->val;
}*/

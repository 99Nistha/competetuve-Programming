vector<int> Solution::dNums(vector<int> &a, int k) {
    /* A=[1, 2, 1, 3, 4, 3] and B = 3
 All windows of size B are
 [1, 2, 1]
 [2, 1, 3]
 [1, 3, 4]
 [3, 4, 3]
 So, we return an array [2, 3, 3, 2]*/
    vector<int> ans;
    map<int,int> m;
    for(int i=0;i<a.size();i++){
        if(i<k){
            //first window
            if(m.find(a[i])==m.end()){
                m[a[i]] =1;
            }
            else{
                m[a[i]]+=1;
            }
            if(i==k-1) {
                // last element of windows
                ans.push_back(m.size());
            }
        }
        else{
            int element_before_start = a[i-k];
            int element_at_end_window = a[i];
            m[element_before_start]-=1;
            if(m[element_before_start]==0){
                m.erase(element_before_start);
            }
            m[ element_at_end_window]+=1;
        ans.push_back(m.size());
        }
    }
    return ans;
}

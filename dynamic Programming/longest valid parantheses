/*Input 2:
    A = ")()(())()"
Output 2:
    8
    sz=9, ans=0, longest[0,0,0,0,0,0,0,0,0]
    )()  longest[0,0,2,0,0,0,0,0,0]
    )()(()  longest[0,0,2,0,0,2,0,0,0]
    )()(())  longest[0,0,2,0,0,2,6,0]
    )()(())() longest[0,0,2,0,0,2,6,8]*/
int Solution::longestValidParentheses(string A) {
    int sz = A.size();
    if(sz <= 1) return 0;
    int ans = 0;
    vector<int>longest(sz, 0);
    for(int i = 1; i < sz; i++) {
        if(A[i] == ')') {
            if(A[i - 1] == '(') {
                longest[i] = longest[i - 2] + 2;
            } else {
                if(i - longest[i - 1] - 1 >= 0 && A[i - longest[i - 1] - 1] == '(') {
                    longest[i] = longest[i - 1] + 2 +
                    ((i - longest[i - 1] - 2 >= 0) ? longest[i - longest[i - 1] - 2] : 0);
                }
            }
        }
        ans = max(ans, longest[i]);
    }
    return ans;
}
